import { Principal } from "@dfinity/principal";
import { SubAccount } from "./types";
export declare const principalToAccountIDInBytes: (principal: Principal, subAccount?: Uint8Array | undefined) => Uint8Array;
export declare const principalToAccountID: (principal: Principal, subAccount?: Uint8Array | undefined) => string;
export declare const asciiStringToByteArray: (text: string) => Array<number>;
export declare const toHexString: (bytes: Uint8Array) => string;
export declare const hexToBytes: (hex: string) => Array<number>;
export declare const toCandidString: (bytes: Uint8Array) => string;
export declare const toCandidString2: (bytes: Array<number>) => string;
export declare const calculateCrc32: (bytes: Uint8Array) => Uint8Array;
export declare const arrayOfNumberToUint8Array: (numbers: Array<number>) => Uint8Array;
export declare const arrayOfNumberToArrayBuffer: (numbers: Array<number>) => ArrayBuffer;
export declare const numberToArrayBuffer: (value: number, byteLength: number) => ArrayBuffer;
export declare const principalToSubAccount: (principal: Principal) => SubAccount;
export declare const toICPe8s: (source: string) => bigint;
export declare const runBatchJobs: (func_groups: Array<Array<() => Promise<void>>>, sleep_after_done?: number | undefined) => Promise<void>;
